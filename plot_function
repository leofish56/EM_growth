####____________plot_function_____________
##Léo Le Gall
##22/03/2024
##dataset by IGFS
####_______________________________________
###ref Master Thesis Léo Le Gall
### this function require only the name of the file (without the format ".csv") to run the function
###it is usefull to incorporate picture corresponding the species with the acronym of the specie: "HER.csv" and "HER.png".
setwd("C:/Users/leo2l/OneDrive/Bureau/Thesis/code/exercice1/IGFS")
EM_spec<-function(specie,mixprop){
  library(nlstools)
  y <- specie
  data <- read.csv(paste(y,".csv", sep = ""))
  Female <- subset(data, obs.sex == "female")
  Male <- subset(data, obs.sex == "male")
  Unclass <- subset(data, obs.sex == "unclassified")
  #mixing proportion for the starting parameters (14)
  mixp_start<-length(Female$length)/(length(Female$length)+(length(Male$length)))
  ## Define growth function (7)
  growth <- function(k, linf, t0, age) {
    linf * (1 - exp(-k * (age - t0)))
  }
  #log likelihood for the starting parameters 
  cdnll_FMU <- function(theta) {
    ## complete data log-likelihood
    cdll <- sum(
      ##known female
      sum(log(mixp_start*dnorm(Female$length,
                                 mean = growth(theta[1], theta[2], theta[3], Female$age),
                                 sd = exp(theta[4])))),
      ##known male
      sum(log((1-mixp_start)*dnorm(Male$length,
                                     mean = growth(theta[5], theta[6], theta[7], Male$age),
                                     sd = exp(theta[8])))))
    return(-cdll)
  }
  ## Complete log-likelihood optimization function (11)
  cdnll_EM<- function(theta){
    ##known female
    normkF<-sum(log(mixp*dnorm(Female$length,
                               mean = growth(theta[1], theta[2], theta[3], Female$age),
                               sd = exp(theta[4]))))
    ##known male
    normkM<-sum(log((1-mixp)*dnorm(Male$length,
                                   mean = growth(theta[5], theta[6], theta[7], Male$age),
                                   sd = exp(theta[8]))))
    ##desinty function unknown
    densunF<-dnorm(Unclass$length,
                   mean = growth(theta[1], theta[2], theta[3], Unclass$age),
                   sd = exp(theta[4]))
    densunM<-dnorm(Unclass$length,
                   mean = growth(theta[5], theta[6], theta[7], Unclass$age),
                   sd = exp(theta[8]))
    probF<-mixp*densunF/(mixp*densunF+(1-mixp)*densunM)
    probM<-(1-mixp)*densunM/(mixp*densunF+(1-mixp)*densunM)
    normUn<-sum(probF*log(mixp*densunF) + probM*log((1-mixp)*densunM))
    cdll<-normkF+normkM+normUn
    return(-cdll)
  } 
  ## observed log-likelihood optimization function (17)
  odnll_EM <-function(theta)  {
    ##known female
    normkF<-sum(log(mixp*dnorm(Female$length,
                               mean = growth(theta[1], theta[2], theta[3], Female$age),
                               sd = exp(theta[4]))))
    ##known male
    normkM<-sum(log((1-mixp)*dnorm(Male$length,
                                   mean = growth(theta[5], theta[6], theta[7], Male$age),
                                   sd = exp(theta[8]))))
    ##desinty function unknown
    densunF<-dnorm(Unclass$length,
                   mean = growth(theta[1], theta[2], theta[3], Unclass$age),
                   sd = exp(theta[4]))
    densunM<-dnorm(Unclass$length,
                   mean = growth(theta[5], theta[6], theta[7], Unclass$age),
                   sd = exp(theta[8]))
    normUn<-sum(log(mixp*densunF + (1-mixp)*densunM))
    odll<-normkF+normkM+normUn
    return(-odll)
  }
  prob.sex <-function(theta){
    ##unclassified female density log-normal(10)
    normF <- dnorm(Unclass$length, mean = 
                     growth(theta[1], theta[2], theta[3], Unclass$age),
                   sd = exp(theta[4]))
    ##unclassified male density log-normal(10)
    normM <- dnorm(Unclass$length, 
                   mean = growth(theta[5], theta[6], theta[7], Unclass$age),
                   sd = exp(theta[8]))
    ##unclassified sex propability (12)
    probF <- mixp * normF / (mixp * normF + (1 - mixp) * normM)
    probM <- 1 - probF
    ret<-list()
    ret$probF<-probF
    ret$probM<-probM
    ret$totprobF<-sum(probF)
    ret$totprobM<-sum(probM)
    return(ret)
  }
  
  ##nls for the omission of unclassified
  nll_F<-nls(length~growth(k,linf,t0,age), data = Female, start = list( k = 0.2, linf = 35, t0 = -1))
  coef_F<-coef(nll_F)
  nll_M<-nls(length~growth(k,linf,t0,age), data = Male, start = list( k = 0.2, linf = 35, t0 = -1))
  coef_M<-coef(nll_M)
  par0<- c(coef_F[["k"]], coef_F[["linf"]], coef_F[["t0"]], log(summary(nll_F)$sigma),
           coef_M[["k"]], coef_M[["linf"]], coef_M[["t0"]], log(summary(nll_M)$sigma))
  ##Hessian matrix to calculate the standard error (18)
  opt_0 <- optimHess(par = par0, fn = cdnll_FMU, control = list(maxit = 10000))
  par0.se<-sqrt(abs(diag(solve(opt_0))))
  ## Initialize parameters
  loop <- 20
  unknown <- matrix(data = NA, nrow = loop + 1, ncol = 18)
  par_start<-c(0.3,40,-1,log(3),0.5,30,-1,log(3))
  unknown[1, ] <- c(par_start, mixp_start, rep(NA,9))
  mixp<-mixp_start
  for (i in 1:loop) {
    k_F<- unknown[i,1]
    linf_F<- unknown[i,2]
    t0_F<-unknown[i,3]
    sd_F <- exp(unknown[i,4])
    k_M <- unknown[i,5]
    linf_M <- unknown[i,6]
    t0_M<-unknown[i,7]
    sd_M <- exp(unknown[i,8])
    mixp <- unknown[i,9]
    
    ## Expectation step
    start <- c(k_F, linf_F, t0_F, log(sd_F), k_M, linf_M, t0_M, log(sd_M))
    opt <- optim(par = start, fn = odnll_EM)
    ## Maximization step (13)
    opt_hes <- optimHess(par = par0, fn = cdnll_EM)
    unknown[i + 1, 1:8] <- opt$par
    unknown[i + 1, 11:18]<-sqrt(abs(diag(solve(opt_hes))))
    ## update mixing proportion (14,15,16)
    probsex<-prob.sex(opt$par)
    totprobF<-probsex$totprobF
    totprobM<-probsex$totprobM
    if (mixprop==1){
    mixp <- totprobF/length(Unclass$length)
    }else if (mixprop==2){
    mixp <- length(Female$length)/(length(Male$length)+length(Female$length))
    }else if (mixprop==3){
    mixp <- sum(totprobF,length(Female$length))/sum(length(Male$length),length(Female$length),length(Unclass$length))
  }
    unknown[i + 1, 9] <- mixp
  }
  par1 <- unknown[loop, 1:10]
  par1.se<-unknown[loop, 11:18]
  mat_par0 <- matrix(data=c(par0[1:4],par0.se[1:4],par0[5:8], par0.se[5:8]), nrow = 4, ncol = 4, byrow = FALSE)
  rownames(mat_par0) <- c("k", "linf", "t0", "lnsigma")
  colnames(mat_par0) <- c("female", "Std.error.female", "male", "Std.error.male")
  mat_par1 <- matrix(data=c(par1[1:4],par1.se[1:4],par1[5:8], par1.se[5:8]), nrow = 4, ncol = 4, byrow = FALSE)
  rownames(mat_par1) <- c("k", "linf", "t0", "lnsigma")
  colnames(mat_par1) <- c("female", "Std.error.female", "male", "Std.error.male")
### statistical 2 sided Z-test(21)
  stat_test<-rep(NA,8)
  var.delta<-rep(NA,8)
  for (n in 1:8){
    ###common standard error (20)
    var.delta[n] <- sqrt(par0.se[n]^2 + par1.se[n]^2)
    if (par0[n]>=par1[n]){
      stat_test[n]<- 2*pnorm(0, par0[n] - par1[n], var.delta[n])
    }else{
      stat_test[n]<- 2*pnorm(0, par1[n] - par0[n], var.delta[n])
    }
  }
  mat_test <- matrix(data=c(stat_test[1:4],var.delta[1:4],stat_test[5:8], var.delta[5:8]), nrow = 4, ncol = 4, byrow = FALSE)
  rownames(mat_test) <- c("k", "linf", "t0", "lnsigma")
  colnames(mat_test) <- c("female", "var.delta.female", "male", "var.delta.male")
  mat_pop <- matrix(data=c(length(Female$length),length(Male$length),totprobF,totprobM), nrow = 2, ncol = 2, byrow = TRUE)
  rownames(mat_pop) <- c("Classified","Unclassified")
  colnames(mat_pop) <- c("Female","Male")
  
  #return variable
  ret<-list()
  ret$par.FMU<-mat_par0
  ret$par.EM<-mat_par1
  ret$stat_tests<-mat_test
  mixp<-par1[9]
  ret$mixprop<-mixp
  ret$pop.struc<-mat_pop
  retprobF<-prob.sex(par1)
  ret$totprobF<-retprobF$totprobF
  ret$probF<-retprobF$probF
  ret$complete.logLik0<-cdnll_EM(par0)
  ret$complete.logLik<-cdnll_EM(par1)
  ret$obs.logLik0<-odnll_EM(par0)
  ret$obs.logLik<-odnll_EM(par1)
  return(ret)
}
